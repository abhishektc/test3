[{"D:\\react\\redcarpet\\client\\src\\reportWebVitals.js":"1","D:\\react\\redcarpet\\client\\src\\App.js":"2","D:\\react\\redcarpet\\client\\src\\components\\Header\\Header.js":"3","D:\\react\\redcarpet\\client\\src\\index.js":"4","D:\\react\\redcarpet\\client\\src\\Screens\\Login\\Login.js":"5","D:\\react\\redcarpet\\client\\src\\components\\Container\\Container.js":"6","D:\\react\\redcarpet\\client\\src\\components\\Input\\Input.js":"7","D:\\react\\redcarpet\\client\\src\\server\\Server.js":"8","D:\\react\\redcarpet\\client\\src\\constant\\Constant.js":"9","D:\\react\\redcarpet\\client\\src\\Screens\\loanList\\LoanList.js":"10","D:\\react\\redcarpet\\client\\src\\Screens\\registerAgent\\RegisterAgent.js":"11","D:\\react\\redcarpet\\client\\src\\Screens\\registerCustomer\\RegisterCustomer.js":"12","D:\\react\\redcarpet\\client\\src\\Screens\\createLoanRequest\\CreateLoanRequest.js":"13","D:\\react\\redcarpet\\client\\src\\Screens\\customerList\\CustomerList.js":"14","D:\\react\\redcarpet\\client\\src\\Screens\\editCustomer\\EditCustomer.js":"15","D:\\react\\redcarpet\\client\\src\\Screens\\editCustomer\\validators.js":"16","D:\\react\\redcarpet\\client\\src\\Screens\\editLoan\\EditLoan.js":"17","D:\\react\\redcarpet\\client\\src\\Screens\\editLoan\\validators.js":"18","D:\\react\\redcarpet\\client\\src\\Screens\\allLoanList\\AllLoanList.js":"19","D:\\react\\redcarpet\\client\\src\\Screens\\customerLoanList\\CustomerLoanList.js":"20"},{"size":362,"mtime":1606726675683,"results":"21","hashOfConfig":"22"},{"size":2918,"mtime":1607082035438,"results":"23","hashOfConfig":"22"},{"size":10797,"mtime":1607076064327,"results":"24","hashOfConfig":"22"},{"size":457,"mtime":1606978894416,"results":"25","hashOfConfig":"22"},{"size":6212,"mtime":1607335356121,"results":"26","hashOfConfig":"22"},{"size":530,"mtime":1606721646332,"results":"27","hashOfConfig":"22"},{"size":7147,"mtime":1607334643774,"results":"28","hashOfConfig":"22"},{"size":11191,"mtime":1607338505640,"results":"29","hashOfConfig":"22"},{"size":87,"mtime":1606798078533,"results":"30","hashOfConfig":"22"},{"size":12145,"mtime":1607338139174,"results":"31","hashOfConfig":"22"},{"size":6910,"mtime":1607005123676,"results":"32","hashOfConfig":"22"},{"size":6846,"mtime":1607337444141,"results":"33","hashOfConfig":"22"},{"size":12407,"mtime":1607335703329,"results":"34","hashOfConfig":"22"},{"size":7233,"mtime":1607338268946,"results":"35","hashOfConfig":"22"},{"size":7942,"mtime":1607336193670,"results":"36","hashOfConfig":"22"},{"size":631,"mtime":1607077345353,"results":"37","hashOfConfig":"22"},{"size":14112,"mtime":1607336758028,"results":"38","hashOfConfig":"22"},{"size":1126,"mtime":1607073997815,"results":"39","hashOfConfig":"22"},{"size":14261,"mtime":1607338331549,"results":"40","hashOfConfig":"22"},{"size":15184,"mtime":1607338238455,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19h7cs5",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\redcarpet\\client\\src\\reportWebVitals.js",[],"D:\\react\\redcarpet\\client\\src\\App.js",[],"D:\\react\\redcarpet\\client\\src\\components\\Header\\Header.js",[],["87","88"],"D:\\react\\redcarpet\\client\\src\\index.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\Login\\Login.js",[],"D:\\react\\redcarpet\\client\\src\\components\\Container\\Container.js",[],"D:\\react\\redcarpet\\client\\src\\components\\Input\\Input.js",[],"D:\\react\\redcarpet\\client\\src\\server\\Server.js",[],"D:\\react\\redcarpet\\client\\src\\constant\\Constant.js",["89"],"export default {\r\n    ADMIN: 'ADMIN',\r\n    AGENT: 'AGENT',\r\n    CUSTOMER: 'CUSTOMER'\r\n}",["90","91"],"D:\\react\\redcarpet\\client\\src\\Screens\\loanList\\LoanList.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\registerAgent\\RegisterAgent.js",["92","93"],"D:\\react\\redcarpet\\client\\src\\Screens\\registerCustomer\\RegisterCustomer.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\createLoanRequest\\CreateLoanRequest.js",["94"],"import React, { useEffect, useState, useReducer, useCallback } from 'react'\r\nimport { Containers } from '../../components/Container/Container'\r\nimport Input from '../../components/Input/Input'\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as authActions from '../../server/Server';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst FORM_INPUT_UPDATE = 'FORM_INPUT_UPDATE';\r\n\r\nconst formReducer = (state, action) => {\r\n    if (action.type === FORM_INPUT_UPDATE) {\r\n        const updatedValues = {\r\n            ...state.inputValues,\r\n            [action.input]: action.value\r\n        };\r\n        const updatedValidities = {\r\n            ...state.inputValidities,\r\n            [action.input]: action.isValid\r\n        };\r\n        let updatedFormIsValid = true;\r\n        for (const key in updatedValidities) {\r\n            updatedFormIsValid = updatedFormIsValid && updatedValidities[key];\r\n        }\r\n        return {\r\n            formIsValid: updatedFormIsValid,\r\n            inputValidities: updatedValidities,\r\n            inputValues: updatedValues\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\nconst CreateLoanRequest = props => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoanCreated, setLoanCreated] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isLoading1, setIsLoading1] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n    const [emi, setEMI] = useState();\r\n    const [totalIntrest, setTotalIntrest] = useState();\r\n    const [loanReport, setLoanReport] = useState([]);\r\n    const [totalAmount, setTotalAmount] = useState();\r\n    const [customerList, setCustomerList] = useState();\r\n\r\n    const fetchCustomer = useCallback(async () => {\r\n        setError(null);\r\n        setIsLoading1(true);\r\n        let action = authActions.getCustomers();\r\n\r\n        setError(null);\r\n\r\n        try {\r\n            const data = await action();\r\n            setCustomerList(data.result);\r\n            setIsLoading1(false)\r\n        } catch (error) {\r\n            setError(error.message);\r\n            setIsLoading1(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchCustomer().then(() => {\r\n            setIsLoading1(false)\r\n        });\r\n\r\n    }, [fetchCustomer])\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n        setLoanCreated(false);\r\n    };\r\n\r\n    const [formState, dispatchFormState] = useReducer(formReducer, {\r\n        inputValues: {\r\n            amount: '',\r\n            intrest: '',\r\n            month: '',\r\n            customerId: ''\r\n        },\r\n        inputValidities: {\r\n            amount: false,\r\n            intrest: false,\r\n            month: false,\r\n            customerId: false\r\n        },\r\n        formIsValid: false,\r\n    });\r\n\r\n    function calCulateEMI() {\r\n        if (formState.inputValidities.amount && formState.inputValidities.intrest && formState.inputValidities.month) {\r\n            const month = formState.inputValues.month;\r\n            const r = formState.inputValues.intrest / 12 / 100;\r\n            const amount = JSON.parse(formState.inputValues.amount);\r\n            const emi = amount * r * Math.pow(1 + r, month) / (Math.pow(1 + r, month) - 1);\r\n            setEMI(Math.round(emi));\r\n            let mIntrest = r * amount;\r\n            let paidBalance = emi - mIntrest;\r\n            let loanBalance = amount - paidBalance;\r\n            let data = [];\r\n            let i = 0;\r\n            let totalIntre = 0;\r\n            if (loanBalance < 0) {\r\n                totalIntre = totalIntre + mIntrest;\r\n            }\r\n            while (loanBalance >= -1) {\r\n                let obj = {};\r\n                i++;\r\n                obj['month'] = i;\r\n                obj['loanBalance'] = Math.round(loanBalance);\r\n                data.push(obj);\r\n                totalIntre = totalIntre + mIntrest;\r\n                mIntrest = r * loanBalance;\r\n                paidBalance = emi - mIntrest;\r\n                loanBalance = loanBalance - paidBalance;\r\n            }\r\n            setTotalIntrest(Math.round(totalIntre));\r\n            setLoanReport(data);\r\n            setTotalAmount(amount + Math.round(totalIntre))\r\n        }\r\n    }\r\n\r\n    const inputChangeHandler = useCallback(\r\n        (inputIdentifier, inputValue, inputValidity) => {\r\n            dispatchFormState({\r\n                type: FORM_INPUT_UPDATE,\r\n                value: inputValue,\r\n                isValid: inputValidity,\r\n                input: inputIdentifier\r\n            });\r\n        },\r\n        [dispatchFormState]\r\n    );\r\n\r\n    const handleSubmit = async (e) => {\r\n\r\n        e.preventDefault();\r\n        setError(null);\r\n        setIsLoading(true);\r\n\r\n        let action = authActions.loanRequest(\r\n            formState.inputValues.amount,\r\n            formState.inputValues.intrest,\r\n            formState.inputValues.month,\r\n            formState.inputValues.customerId,\r\n            localStorage.getItem('userId'),\r\n            totalIntrest,\r\n            emi\r\n        );\r\n\r\n        setError(null);\r\n\r\n        try {\r\n            const data = await action();\r\n\r\n            if (data.success) {\r\n                setLoanCreated(true);\r\n            }\r\n\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            setError(error.message)\r\n            setIsLoading(false);\r\n            setOpen(true);\r\n        }\r\n    }\r\n\r\n    const styles = {\r\n        title: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\r\n        formField: { marginLeft: '2%', marginTop: '2%', marginRight: '2%', width: '100%' }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading1 ? (\r\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <CircularProgress size={50} color=\"primary\" />\r\n                </div>\r\n            ) : (\r\n                    <>\r\n                        <Containers>\r\n                            <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                            >\r\n                                <Alert onClose={handleClose} severity=\"error\">\r\n                                    {error}\r\n                                </Alert>\r\n                            </Snackbar>\r\n                            <Snackbar open={isLoanCreated} autoHideDuration={3000} onClose={handleClose}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                            >\r\n                                <Alert onClose={handleClose} severity=\"success\">\r\n                                    Loan Requested Successfully\r\n                                </Alert>\r\n                            </Snackbar>\r\n                            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }} >\r\n                                <Typography style={styles.title} variant=\"h5\" component=\"h2\">\r\n                                    Create Loan Request\r\n                                </Typography>\r\n                                <Input\r\n                                    style={styles.formField}\r\n                                    type=\"text\"\r\n                                    id=\"amount\"\r\n                                    label=\"Amount\"\r\n                                    onChange={inputChangeHandler}\r\n                                    onBlur={calCulateEMI}\r\n                                    required\r\n                                    validation=\"Amount must be greater than 1000.\"\r\n                                />\r\n\r\n                                <Input\r\n                                    style={styles.formField}\r\n                                    type=\"text\"\r\n                                    id=\"intrest\"\r\n                                    label=\"Intrest Rate\"\r\n                                    onChange={inputChangeHandler}\r\n                                    onBlur={calCulateEMI}\r\n                                    required\r\n                                    validation=\"Intrest rate is required. Eg: 5, 5.50, 9.25, etc,.\"\r\n                                />\r\n\r\n                                <Input\r\n                                    style={styles.formField}\r\n                                    type=\"text\"\r\n                                    id=\"month\"\r\n                                    label=\"Loan Tenure(in month)\"\r\n                                    onChange={inputChangeHandler}\r\n                                    onBlur={calCulateEMI}\r\n                                    required\r\n                                    validation=\"Month contains only numeric.\"\r\n                                />\r\n\r\n                                <Input\r\n                                    labelId=\"select\"\r\n                                    id=\"customerId\"\r\n                                    label=\"Loan Lendor\"\r\n                                    onChange={inputChangeHandler}\r\n                                    required\r\n                                    validation=\"Loan Lendor name required.\"\r\n                                    data={customerList}\r\n                                />\r\n\r\n                                {!isLoading ? (\r\n                                    <Button type=\"submit\" style={{ margin: '2%', width: '100%' }} disabled={!formState.formIsValid} variant=\"contained\" color=\"primary\">\r\n                                        CREATE LOAN REQUEST\r\n                                    </Button>\r\n                                ) : (\r\n                                        <Button style={{ margin: '2%', width: '100%' }} variant=\"contained\" color=\"primary\">\r\n                                            <CircularProgress size={20} color=\"secondary\" />\r\n                                        </Button>\r\n                                    )\r\n                                }\r\n                            </form>\r\n                        </Containers>\r\n                        <Card >\r\n                            <CardContent style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\" }}>\r\n                                <div>\r\n                                    <Typography color=\"textSecondary\">\r\n                                        Loan EMI\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {'\\u20B9'}{emi}\r\n                                    </Typography>\r\n                                </div>\r\n                                <div>\r\n                                    <Typography color=\"textSecondary\">\r\n                                        Total Interest Payable\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {'\\u20B9'}{totalIntrest}\r\n                                    </Typography>\r\n                                </div>\r\n                                <div>\r\n                                    <Typography color=\"textSecondary\">\r\n                                        Total Payment\r\n                                    </Typography>\r\n                                    <Typography variant=\"h5\" component=\"h2\">\r\n                                        {'\\u20B9'}{totalAmount}\r\n                                    </Typography>\r\n                                </div>\r\n\r\n                            </CardContent>\r\n                        </Card>\r\n                    </>\r\n                )}\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default CreateLoanRequest;\r\n","D:\\react\\redcarpet\\client\\src\\Screens\\customerList\\CustomerList.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\editCustomer\\EditCustomer.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\editCustomer\\validators.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\editLoan\\EditLoan.js",["95"],"D:\\react\\redcarpet\\client\\src\\Screens\\editLoan\\validators.js",[],"D:\\react\\redcarpet\\client\\src\\Screens\\allLoanList\\AllLoanList.js",["96"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as authActions from '../../server/Server';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n});\r\n\r\nconst AllLoanList = props => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isLoading1, setIsLoading1] = useState(false);\r\n    const [loanList, setLoanList] = useState([]);\r\n    const [filterLoanList, setFilterLoanList] = useState();\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLoanList().then(() => {\r\n            setIsLoading(false)\r\n        });\r\n    }, [])\r\n\r\n    const fetchLoanList = useCallback(async () => {\r\n        setError(null);\r\n        setIsLoading(true);\r\n        let action = authActions.allLoanList();\r\n\r\n        setError(null);\r\n\r\n        try {\r\n            const data = await action();\r\n            setLoanList(data.result);\r\n            setFilterLoanList(data.result);\r\n            setIsLoading(false)\r\n        } catch (error) {\r\n            setError(error.message);\r\n            setIsLoading(false);\r\n            setOpen(true);\r\n        }\r\n    }, [])\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClose1 = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n        setIsUpdated(false);\r\n    };\r\n\r\n    const filterLoanListHandler = (type, name, val = 'NEW') => {\r\n        let result = [];\r\n        if (type === 'filter') {\r\n            result = loanList.filter((data) => {\r\n                if (data[name] === val)\r\n                    return data\r\n                return null\r\n            })\r\n        } else if (type === 'sort') {\r\n            result = loanList.sort((a, b) => b[name] - a[name]);\r\n        } else if (type === 'sortDate') {\r\n            result = loanList.sort((a, b) => new Date(b[name]).getTime() - new Date(a[name]).getTime());\r\n        }\r\n        setFilterLoanList(ele => [...result]);\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const handleSubmit = async (id, val) => {\r\n        setError(null);\r\n        setIsLoading1(true);\r\n\r\n        let action = authActions.updateLoanState(\r\n            id,\r\n            val\r\n        );\r\n\r\n        setError(null);\r\n\r\n        try {\r\n            const data = await action();\r\n\r\n            if (data.success) {\r\n                setIsUpdated(true);\r\n            }\r\n\r\n            setIsLoading1(false);\r\n        } catch (error) {\r\n            setError(error.message)\r\n            setIsLoading1(false);\r\n            setOpen(true);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Container style={{ marginTop: '2%' }}>\r\n            {isLoading ? (\r\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <CircularProgress size={50} color=\"primary\" />\r\n                </div>\r\n            ) : (\r\n                    <>\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }}>\r\n                            <Typography style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }} variant=\"h6\" component=\"h2\">\r\n                                Loan List\r\n                            </Typography>\r\n                            <Snackbar open={open} autoHideDuration={3000} onClose={handleClose1}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                            >\r\n                                <Alert onClose={handleClose1} severity=\"error\">\r\n                                    {error}\r\n                                </Alert>\r\n                            </Snackbar>\r\n                            <Snackbar open={isUpdated} autoHideDuration={3000} onClose={handleClose1}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                            >\r\n                                <Alert onClose={handleClose1} severity=\"success\">\r\n                                    Loan state updated successfully\r\n                            </Alert>\r\n                            </Snackbar>\r\n                            <Button variant=\"contained\" title=\"Filter Loan List\" color=\"primary\" onClick={handleClick}><FilterListIcon fontSize=\"default\" /></Button>\r\n                            <StyledMenu\r\n                                id=\"customized-menu\"\r\n                                anchorEl={anchorEl}\r\n                                keepMounted\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('sort', 'amount')}>\r\n                                    <ListItemText primary=\"Amount\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('sort', 'intrest')}>\r\n                                    <ListItemText primary=\"Intrest Rate\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('sort', 'month')}>\r\n                                    <ListItemText primary=\"Month\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('sortDate', 'createdAt')}>\r\n                                    <ListItemText primary=\"Loan Created\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('sortDate', 'updatedAt')}>\r\n                                    <ListItemText primary=\"Loan UpdatedAt\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('filter', 'state', 'NEW')}>\r\n                                    <ListItemText primary=\"State- NEW\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('filter', 'state', 'APPROVED')}>\r\n                                    <ListItemText primary=\"State- APPROVED\" />\r\n                                </StyledMenuItem>\r\n                                <StyledMenuItem onClick={e => filterLoanListHandler('filter', 'state', 'REJECTED')}>\r\n                                    <ListItemText primary=\"State- REJECTED\" />\r\n                                </StyledMenuItem>\r\n                            </StyledMenu>\r\n                        </div>\r\n                        <TableContainer component={Paper}>\r\n                            <Table className={classes.table} aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>SI. NO</StyledTableCell>\r\n                                        <StyledTableCell>Loan Lender</StyledTableCell>\r\n                                        <StyledTableCell>Phone</StyledTableCell>\r\n                                        <StyledTableCell>Agent Name</StyledTableCell>\r\n                                        <StyledTableCell>Agent Phone</StyledTableCell>\r\n                                        <StyledTableCell>Amount</StyledTableCell>\r\n                                        <StyledTableCell>Intrest Rate</StyledTableCell>\r\n                                        <StyledTableCell>Month</StyledTableCell>\r\n                                        <StyledTableCell>Total Intrest</StyledTableCell>\r\n                                        <StyledTableCell>EMI</StyledTableCell>\r\n                                        <StyledTableCell>State</StyledTableCell>\r\n                                        <StyledTableCell>Action</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {filterLoanList !== undefined &&\r\n                                        filterLoanList.map((row, index) => (\r\n                                            <StyledTableRow key={row._id}>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">\r\n                                                    {index + 1}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">\r\n                                                    {row.customerId.name}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.customerId.phone}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.agentId.name}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.agentId.phone}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.amount}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.intrest}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.month}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.totalIntrest}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.emi}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{row.state}</StyledTableCell>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">\r\n                                                    {isLoading1 ? (\r\n                                                        <CircularProgress size={30} color=\"primary\"/>\r\n                                                    ) : (\r\n                                                            <>\r\n                                                                <Button variant=\"contained\" color=\"primary\" onClick={e => handleSubmit(row._id, 'APPROVED')}>\r\n                                                                    APPROVE\r\n                                                                </Button>\r\n                                                                <Button variant=\"contained\" color=\"secondary\" onClick={e => handleSubmit(row._id, 'REJECTED')}>\r\n                                                                    REJECT\r\n                                                                </Button>\r\n                                                            </>\r\n\r\n                                                        )\r\n\r\n                                                    }\r\n\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </>\r\n                )\r\n            }\r\n\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default AllLoanList;\r\n","D:\\react\\redcarpet\\client\\src\\Screens\\customerLoanList\\CustomerLoanList.js",["97","98"],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":1,"nodeType":"105","endLine":5,"endColumn":2},{"ruleId":"99","replacedBy":"106"},{"ruleId":"101","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"112","line":43,"column":11,"nodeType":"110","messageId":"111","endLine":43,"endColumn":18},{"ruleId":"108","severity":1,"message":"113","line":50,"column":12,"nodeType":"110","messageId":"111","endLine":50,"endColumn":22},{"ruleId":"108","severity":1,"message":"113","line":34,"column":12,"nodeType":"110","messageId":"111","endLine":34,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":96,"column":8,"nodeType":"116","endLine":96,"endColumn":10,"suggestions":"117"},{"ruleId":"108","severity":1,"message":"118","line":96,"column":12,"nodeType":"110","messageId":"111","endLine":96,"endColumn":24},{"ruleId":"108","severity":1,"message":"119","line":98,"column":12,"nodeType":"110","messageId":"111","endLine":98,"endColumn":23},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["120"],["121"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'loanReport' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchLoanList'. Either include it or remove the dependency array.","ArrayExpression",["122"],"'totalIntrest' is assigned a value but never used.","'totalAmount' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [fetchLoanList]",{"range":"125","text":"126"},[3058,3060],"[fetchLoanList]"]